// <auto-generated />
using System;
using CandyStore.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CandyStore.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20220528202104_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CandySale", b =>
                {
                    b.Property<int>("CandyID")
                        .HasColumnType("int");

                    b.Property<int>("SalesSaleID")
                        .HasColumnType("int");

                    b.HasKey("CandyID", "SalesSaleID");

                    b.HasIndex("SalesSaleID");

                    b.ToTable("CandySale");
                });

            modelBuilder.Entity("CandyStore.Data.Models.Candy", b =>
                {
                    b.Property<int>("CandyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CandyID"), 1L, 1);

                    b.Property<int?>("CategoryID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageThumbnailURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("CandyID");

                    b.HasIndex("CategoryID");

                    b.ToTable("Candy");

                    b.HasData(
                        new
                        {
                            CandyID = 1,
                            CategoryID = 1,
                            Description = "Lorem ipsum dolor sit amet, consectetur adiposcing elit, sed do eiusmod tempor...",
                            ImageThumbnailURL = "\\img\\thumbnails\\chocolateCandy3-small.jpg",
                            ImageURL = "\\img\\chocolet.candy.jpg",
                            Name = "Assorted Chocolate Candy",
                            Price = 4.95m,
                            Stock = 0
                        },
                        new
                        {
                            CandyID = 2,
                            CategoryID = 1,
                            Description = "Lorem ipsum dolor sit amet, consectetur adiposcing elit, sed do eiusmod tempor...",
                            ImageThumbnailURL = "\\img\\thumbnails\\chocolateCandy-small.jpg",
                            ImageURL = "\\img\\chocolateCandy.jpg",
                            Name = "Assorted Chocolate Candy",
                            Price = 3.95m,
                            Stock = 0
                        },
                        new
                        {
                            CandyID = 3,
                            CategoryID = 1,
                            Description = "Lorem ipsum dolor sit amet, consectetur adiposcing elit, sed do eiusmod tempor...",
                            ImageThumbnailURL = "\\img\\thumbnails\\chocolateCandy2-small.jpg",
                            ImageURL = "\\img\\chocolateCandy2.jpg",
                            Name = "Assorted Chocolate Candy",
                            Price = 2.95m,
                            Stock = 0
                        },
                        new
                        {
                            CandyID = 4,
                            CategoryID = 2,
                            Description = "Lorem ipsum dolor sit amet, consectetur adiposcing elit, sed do eiusmod tempor...",
                            ImageThumbnailURL = "\\img\\thumbnails\\FruitCandy-small.jpg",
                            ImageURL = "\\img\\FruitCandy.jpg",
                            Name = "Assorted Fruit Candy",
                            Price = 6.95m,
                            Stock = 0
                        },
                        new
                        {
                            CandyID = 5,
                            CategoryID = 2,
                            Description = "Lorem ipsum dolor sit amet, consectetur adiposcing elit, sed do eiusmod tempor...",
                            ImageThumbnailURL = "\\img\\thumbnails\\fruitCandy2-small.jpg",
                            ImageURL = "\\img\\fruitCandy2.jpg",
                            Name = "Assorted Fruit Candy",
                            Price = 3.95m,
                            Stock = 0
                        },
                        new
                        {
                            CandyID = 6,
                            CategoryID = 2,
                            Description = "Lorem ipsum dolor sit amet, consectetur adiposcing elit, sed do eiusmod tempor...",
                            ImageThumbnailURL = "\\img\\thumbnails\\fruitCandy3-small.jpg",
                            ImageURL = "\\img\\fruitCandy3.jpg",
                            Name = "Assorted Fruit Candy",
                            Price = 4.95m,
                            Stock = 0
                        },
                        new
                        {
                            CandyID = 7,
                            CategoryID = 3,
                            Description = "Lorem ipsum dolor sit amet, consectetur adiposcing elit, sed do eiusmod tempor...",
                            ImageThumbnailURL = "\\img\\thumbnails\\gummyCandy-small.jpg",
                            ImageURL = "\\img\\gummyCandy.jpg",
                            Name = "Assorted Gummy Candy",
                            Price = 4.95m,
                            Stock = 0
                        },
                        new
                        {
                            CandyID = 8,
                            CategoryID = 3,
                            Description = "Lorem ipsum dolor sit amet, consectetur adiposcing elit, sed do eiusmod tempor...",
                            ImageThumbnailURL = "\\img\\thumbnails\\gummyCandy2-small.jpg",
                            ImageURL = "\\img\\gummyCandy2.jpg",
                            Name = "Assorted Gummy Candy",
                            Price = 6.95m,
                            Stock = 0
                        },
                        new
                        {
                            CandyID = 9,
                            CategoryID = 3,
                            Description = "Lorem ipsum dolor sit amet, consectetur adiposcing elit, sed do eiusmod tempor...",
                            ImageThumbnailURL = "\\img\\thumbnails\\gummyCandy3-small.jpg",
                            ImageURL = "\\img\\gummyCandy3.jpg",
                            Name = "Assorted Gummy Candy",
                            Price = 4.95m,
                            Stock = 0
                        },
                        new
                        {
                            CandyID = 10,
                            CategoryID = 4,
                            Description = "Lorem ipsum dolor sit amet, consectetur adiposcing elit, sed do eiusmod tempor...",
                            ImageThumbnailURL = "\\img\\thumbnails\\halloweenCandy-small.jpg",
                            ImageURL = "\\img\\halloweenCandy.jpg",
                            Name = "Assorted Halloween Candy",
                            Price = 3.95m,
                            Stock = 0
                        },
                        new
                        {
                            CandyID = 11,
                            CategoryID = 4,
                            Description = "Lorem ipsum dolor sit amet, consectetur adiposcing elit, sed do eiusmod tempor...",
                            ImageThumbnailURL = "\\img\\thumbnails\\halloweenCandy2-small.jpg",
                            ImageURL = "\\img\\halloweenCandy2.jpg",
                            Name = "Assorted Halloween Candy",
                            Price = 5.95m,
                            Stock = 0
                        },
                        new
                        {
                            CandyID = 12,
                            CategoryID = 4,
                            Description = "Lorem ipsum dolor sit amet, consectetur adiposcing elit, sed do eiusmod tempor...",
                            ImageThumbnailURL = "\\img\\thumbnails\\halloweenCandy3-small.jpg",
                            ImageURL = "\\img\\halloweenCandy3.jpg",
                            Name = "Assorted Halloween Candy",
                            Price = 6.95m,
                            Stock = 0
                        },
                        new
                        {
                            CandyID = 13,
                            CategoryID = 5,
                            Description = "Lorem ipsum dolor sit amet, consectetur adiposcing elit, sed do eiusmod tempor...",
                            ImageThumbnailURL = "\\img\\thumbnails\\hardCandy-small.jpg",
                            ImageURL = "\\img\\hardCandy.jpg",
                            Name = "Assorted Hard Candy",
                            Price = 3.95m,
                            Stock = 0
                        },
                        new
                        {
                            CandyID = 14,
                            CategoryID = 5,
                            Description = "Lorem ipsum dolor sit amet, consectetur adiposcing elit, sed do eiusmod tempor...",
                            ImageThumbnailURL = "\\img\\thumbnails\\hardCandy2-small.jpg",
                            ImageURL = "\\img\\hardCandy2.jpg",
                            Name = "Assorted Hard Candy",
                            Price = 2.95m,
                            Stock = 0
                        },
                        new
                        {
                            CandyID = 15,
                            CategoryID = 5,
                            Description = "Lorem ipsum dolor sit amet, consectetur adiposcing elit, sed do eiusmod tempor...",
                            ImageThumbnailURL = "\\img\\thumbnails\\hardCandy3-small.jpg",
                            ImageURL = "\\img\\hardCandy3.jpg",
                            Name = "Assorted Hard Candy",
                            Price = 5.95m,
                            Stock = 0
                        });
                });

            modelBuilder.Entity("CandyStore.Data.Models.Category", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryID"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryID");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryID = 1,
                            Name = "Chocolate Candy"
                        },
                        new
                        {
                            CategoryID = 2,
                            Name = "Fruit Candy"
                        },
                        new
                        {
                            CategoryID = 3,
                            Name = "Gummy Candy"
                        },
                        new
                        {
                            CategoryID = 4,
                            Name = "Halloween Candy"
                        },
                        new
                        {
                            CategoryID = 5,
                            Name = "Hard Candy"
                        });
                });

            modelBuilder.Entity("CandyStore.Data.Models.Order", b =>
                {
                    b.Property<int>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderID"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("OrderPlaced")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("OrderTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.HasKey("OrderID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("CandyStore.Data.Models.OrderDetail", b =>
                {
                    b.Property<int>("OrderDetailID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderDetailID"), 1L, 1);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("CandyID")
                        .HasColumnType("int");

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderDetailID");

                    b.HasIndex("CandyID");

                    b.HasIndex("OrderID");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("CandyStore.Data.Models.Sale", b =>
                {
                    b.Property<int>("SaleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SaleID"), 1L, 1);

                    b.Property<int>("Discount")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("SaleID");

                    b.ToTable("Sales");
                });

            modelBuilder.Entity("CandyStore.Data.Models.ShoppingCartItem", b =>
                {
                    b.Property<int>("ShoppingCartItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShoppingCartItemID"), 1L, 1);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("CandyID")
                        .HasColumnType("int");

                    b.Property<string>("ShoppingCartID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ShoppingCartItemID");

                    b.HasIndex("CandyID");

                    b.ToTable("ShoppingCartItems");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CandySale", b =>
                {
                    b.HasOne("CandyStore.Data.Models.Candy", null)
                        .WithMany()
                        .HasForeignKey("CandyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CandyStore.Data.Models.Sale", null)
                        .WithMany()
                        .HasForeignKey("SalesSaleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CandyStore.Data.Models.Candy", b =>
                {
                    b.HasOne("CandyStore.Data.Models.Category", "Category")
                        .WithMany("Candy")
                        .HasForeignKey("CategoryID");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("CandyStore.Data.Models.OrderDetail", b =>
                {
                    b.HasOne("CandyStore.Data.Models.Candy", "Candy")
                        .WithMany()
                        .HasForeignKey("CandyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CandyStore.Data.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Candy");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("CandyStore.Data.Models.ShoppingCartItem", b =>
                {
                    b.HasOne("CandyStore.Data.Models.Candy", "Candy")
                        .WithMany()
                        .HasForeignKey("CandyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Candy");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CandyStore.Data.Models.Category", b =>
                {
                    b.Navigation("Candy");
                });

            modelBuilder.Entity("CandyStore.Data.Models.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
